------ S.O.L.I.D --------

Single Responsibility Principle -> "Uma classe deveria ter apenas um unico motivo para mudar"

Open Closed Principle -> "Entidades de software(classes, modulos, funções, etc.) devem estara abertas para extensão porem fechadas para modificação"
 
Liskov Substitution Principle -> "Um pato de borracha não é necessariamente igual a um pato de verdade"
                                "devemos poder substituir classes base por suas classes derivadas em qualquer lugar, sem problema."

Interface Segregation Principle -> "Uma classe não deveria ser forçada a depender de métodos que não utilizara"

Dependency Inversion Principle -> "Abstrações não devem depender de implementações. Implementações devem depender de Abstrações"

Coesão - Encapsulamento - Acoplamento

------ Design Patterns ------

"Solução comum para um problema recorrente ao utilizar o paradigma da orientação a objetos"

Comportamentais :

    Strategy ->
        Problema - Alto numero de condicionais em uma classe ou no projeto em si
        Solução - Separa-las em classes que possuam suas estrategias especificas e serem independentes entre elas

    Chain of Responsibility -> Passar o problema nivel por nivel exemplo: Mandar o atentende chamar o Gerente mandar o Gerente chamar o Diretor
        Problema -
        Solução - 

    Template Method -> Pesquisar melhor

    Sate -> 
        Problema - Alto numero de condicionais para determinação dos estados de um programa 

        Solução - Dando a responsabilidade para o controle de estados a metodos e classes

    Command ->
        Ter uma classe apenas para os comandos, quando é necessario a criação de uma interface de interação com usuario e que usa requisições

    Observer ->
        Inversão de controles. Pesquisar melhor

Estruturais :
    
    Adapter ->
        É um padrão de projeto estrutural que permite objetos com interfaces incompatíveis colaborarem entre si.

    Decorator ->
        Exemplo: Decorando a arvore de natal com pisca pisca, estrelas isso é o padrão decorator

    Composite ->
        O Composite é um padrão de projeto estrutural que permite que você componha objetos em estruturas de árvores e então trabalhe com essas estruturas como se elas fossem objetos individuais.
        Utilizando as interfaces fazer objetos simples e complexos serem tratados de maneira uniforme

    Facade ->
        Omitir metodos/detalhes internos das classes. Uma interface de uso para usuario mais simplificada . Classe de fachada

    Proxy ->
        Interceptar um valor/classe para fazer validação, perfomace guardando em um proxy

-------------------------------------------------------------------------------------

@Slf4j - LOG - LOMBOK SPRING
    log.info("msg")

Componentes do software e suas relações
Infraestrutura do software
Estrutra e design do código
Suporte aos requisitos de negócio
Simplificar evoluções no software -> Escalabilidade

Requisitos não funcionais que são quase sempre negligenciados -> Manutenibiliadade, Extensibilidade

Clean Architecture :
    Isolar o código de domínio da aplicação
    Inversão de dependencias
    Favorece boas práticas de Orientação a Objetos
    Código de domínio com alta "testabilidade"
    Independencia de frameworks e detalhes de infraestrutura

    Entidades -> Possuem uma identidade única
    Value Objects -> Não possui uma identidade única, se a igualdade do objeto é relacionada na comparação de todos seus valores
    Repository -> Implementar em camadas para ter independencia em suas implementações

    Se retornar o builder pode ficar encadeamento de metodos

    Infraestrutura -> Aplicação -> Dominio

    Domain Services -> classes que representam uma ação entre mais de uma Entidade
    Application Service/Use Case/Command Handler -> Controlam o fluxo de alguma regra em nossa aplicação, servem para fornecer pontos de entradas na sua aplicação
    Infraestructure Services -> Implementações de interfaces presentes nas camadas de dominio ou de aplicação

DDD - Domain Driven Design :
    Foco no dominio
    Linguaguem Ubiqua 
    Contexto delimitado
    Blocos de construção -> Services, Repository, Entity, Value Objects separação em camadas

    Linguagem Ubiquoa -> Uma linguagem universal que traz o entendimento entre a linguagem de negocios e lingaguem tecnica
    Invariantes -> Regra de negocio que deve sempre ser verdadeira para os objetos serem válidos

    Aggregates -> Conjunto de coisas que pertencem a um Aggregate root - Uma boa pratica é o root comandar todas ações que modificam os seus agreggates
    Eventos ->
    Bounded Contexts / Contextos delimitados -> A separação de contexto da para projeto flexibilidade 
    Camada anti-corrupção -> Camada para fazer comunicação de elementos compartilhados sem o comprometimento do sistema inteiro
    Sistemas distribuidos -> Sistema divido em sistemas menores - MICROSERVIÇOS