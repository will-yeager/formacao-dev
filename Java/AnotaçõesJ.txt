------------------------------------ JAVA BASICS ---------------------------------

Máquina Virtual JAVA JVM

linguagem java -> bytecode java -> MAQUINA VIRTUAL JAVA -> sistemas

o Bytecode é independente do sistema operacional

JDK -> Java Developer Kit
JRE -> Java Runtime Enviroment
JVM -> Java Virtual Machines

Criando o primeiro programa em JAVA:
    É necessário o nome do arquivo ser igual a class principal dele 
    O metodo main é sempre -> public static void main(String[] args) {}
    Toda instrução Java deve ser finalizada com ;

javac CLASSE.java -> compilar o codigo
java CLASSE -> rodar o código compilado na virtual machine

System.out.println() -> Para imprimir algo no console dando linha no final

Variaveis:
    int -> número inteiro
    float -> número flutuante obs : no final do número deve ter f
    double -> número inteiro ou número real
    String -> texto
    char -> um único caractere
    boolean -> true ou false
    long -> guarda um número maior que bilhões obs: no final do número deve ter l
    short -> guarda um número pequeno
    byte -> guarda um número menor que o short que vai até 127

    type cast -> converter um tipo de variavel em outra por exemplo para transformar um número double em é int é só colocar (int) na frente da variavel

Condicional:
    if -> se
    else -> senão

    switch -> condição usando casos
        case 1: -> caso 1
            break -> para parar o código se o caso for 1
        default: -> se nenhum dos casos for validos ele será executado
            break

    || -> or 
    && -> and

Escopos:
    escopos de bloco -> as variaveis só existem dentro do bloco, como por exemplo nas condicionais
    escopos dos laços -> as variaveis como devem ser declarada antes do laço elas são globais, como por exemplo no while

Laço de Repetição:
    while -> Ele repeta uma função até uma condição digitada ser verdadeira
    for -> (VARIAVEL; CONDIÇÃO; MUDANÇA DA VARIAVEL)

Como randomizar um numero em uma range determinada -> random.nextInt((max - min) + 1) + min;

Equals:
    Usado no lugar do (==) pois pode conflitar entre objetos
    Deve ser reescrito para comparação entre objetos

Thread -> São usadas para executar dois ou mais procedimentos internos do programa ao mesmo tempo ou seja executar algo paralelamente

--------- Exception ---------

Para criar uma exceção é so implementar a inferface Exception/RuntimeException

O compilador verifica Exception - (checked) -> obrigado o tratamento do erro
O compilador não verifica o RuntimeException - (unchecked) -> não obriga o tratamento do erro

throw new Exception -> joga um erro na pilha de execução

try {} catch(Exception e) {} finally {} -> Estrutura básica da exceções

pilha de execução -> call stack
    o programa vai executando sempre o método do topo da pilha

Debug(Debugar) -> é percorrer a pilha de execução para entender oque acontece internamente no programa

CONDIÇÃO | CONDIÇÃO -> usado para retornar true se alguma das condições for verdadeira

Error -> são erros gerenciados pela virtualmachine do java 
    stackoverflowerror -> erro mais classico que informa que a pilha de execução não tem mais memória .

Quando implementada a interface AutoCloseable é possivel fazer um finally automatico com a criação do metodo close

Quando há o finally o catch é o opcional

IllegalArgumentException(msg)
IllegalStateException(msg)

--------- Java PACOTES E MODIFICADORES DE ACESSO ---------

Pacotes(Packages) -> pastas para organização do projeto

Padrão Nomenclatura de pacotes -> NOME_DO_SITE_AO_CONTRARIO.NOME_DO_PROJETO -> br.com.exemlo.projetoexemplo

Full qualified name(FQN) -> É o nome completo da classe, composto pelo nome do pacote e o nome da classe

public -> atributo/metodo visivel para todos
protected -> atributo visivel apenas para qualquer um no pacote e para as classes filhas fora do pacote
<< package private >> (default) -> atributo visivel a classe e dentro do pacote
private -> atributo visivel apenas na classe

---- DOC ----

DOCUMENTAÇÃO -> apenas comentar classes/metodos usando essa estrutura de comentarios-> /** 
                                                                                        * doc aqui
                                                                                        */

Depois de fazer os comentarios basta clicar em project e gerar a documentação;

---- JAR ----

O arquivo jar é necessario quando queremos transformar um projeto em uma library/biblioteca para ser usado por outros programadores, as famosas libs/

É possivel criar um arquivo jar executavel que inicia usando um main, configurando na criação do JAR

---- JAVA.LANG ----

Pacote fundamental do java, que é importado automatiamente
    Ex. de class -> System, Exception, String[]

String é imutável, e é uma CharSequence

StringBuilder -> usado para a concatenação de varias String usando objeto.append(STRING)

---- JAVA.UTIL ----

Para inicilizar uma array é apenas colocar -> Tipo[] Array = new Tipo[Quantidade]
    É necessaria uma quantidade pre determinada para poder instanciar uma nova array
    Há a possibilidade de iniciar de forma literal a array fazendo o seguinte -> Tipo[] Array = {ref1, ref2, ref3, ref4, ref5}

Valor padrão de uma referencia é null
Valor padrão de um int é 0

String[] args -> é utilizado para passar parametros quando o main é rodado no terminal

Number é a classe mãe de todos wrappers que usam numeros como Float, Double, Integer

----- LAMBDA EXPRESSION ----

Como usar uma expressão lambda - ( PARAM -> function )
                                ( PARAM -> {return function})

lista.forEach( ELEMENTO -> function)

So funciona quando a interface retornar algo e precisar de parametros, ou seja ser uma interface funcional

METHOD REFERNCE -> um jeito mais curto de usar a expressãp lambda para chamar um metodo. EXEMPLO : System.out::println;

---- STREAM ------

lista.stream() -> invocação do metodo stream

lista.stream().filter(boolean response) -> filtra de acordo com a condição estabelecida

lista.stream().map(method reference) -> transforma a stream em alguma lista do tipo determinado pela method reference

lista.stream().forEach(method reference) -> faz uma ação para cada elemento da lista

int sum = lista.stream().sum() -> soma todos os valores da stream

OptionalDouble media = lista.stream().average() -> média dos valores da stream

lista.stream().findAny() -> encontra qualquer elemento da lista que condiz com a condição

lista.stream().findFirst() -> encontra o primeiro elemento da lista que condiz com a condição

lista.stream().ifPresent() -> se o objeto for encontrado e não nulo, executa uma ação

cursos = lista.stream().collect(Collectors.toList()) -> Transforma a stream em uma lista

Map<tipo1, tipo2> map cursos.stream().collect(Collector.toMap(chave, valor));

------- DATE ---------

Api de Datas -> import java.time.*;

LocalDate.now() -> Devolve a data atual

LocalDatimeTime -> Devolve a data atual com horario

LocalDate.of(year, month, day) -> Devolve uma data determinada pelo desenvolvedor

data.getYear() -> Devolve o ano de uma determinada data

Period.between(data1, data2) -> Devolve o periodo entre duas Datas

data.plusYears(x) -> Aumenta o número do ano de determinada data

DataTimeFormatter.ofPattern("dd/MM/yyyy") -> Instancia um formato de data

data.format(formatter) -> Devolve a data no formatado instanciado

LocalTime.of(hora, minuto) -> Devolve o horario determinado pelo desenvolvedor

----- NOVIDADES DO JAVA MODERNO ----

List.of(elementos) -> Cria uma lista imutavel com elementos pre-determinados

Array.asList(elementos) -> Cria uma lista com tamanho imutavel mas podendo modificar seus elementos

var Classe -> Um jeito menos verboroso de se criar um objeto mas funciona apenas em casos especificos

Text Block -> Usado para textos já pré formatados e para instancia-lo é só usar 3 aspas no inicio e no fim

Switch com cada caso usando expressão lambda EXEMPLO - Switch(var) {
                                                            case 1 -> function
                                                            default -> function
                                                        }

JSHELL -> Usado para facilitar teste de codigos usando o command shell

-------- Maven --------

https://mvnrepository.com/

Estrutra que organiza todas dependencia e bibliotecas/ Facilita o build de uma aplicação JAVA

APACHE ANT -> automatiza a compilaçã e facilita o trabalho da build de uma aplicação java
APACHE IVY -> facilita o gerenciamento das dependencias usando um arquivo xml

APACHE MAVEN -> ant + ivy

src/main/java -> Diretorio usado para armazenar os arquivos .java
src/main/resources -> Geralmente nesse diretorio ficam os arquivos de configurações
src/test/java -> Diretorio usado para armazenar os arquivos de test com junit
src/test/resources -> Diretorio usado para armanezar os arquivos de test automatizado

Usar o Junit para criar testes

<GroupID>Id unico para empresa/grupo</GroupID>
<ArtifactId>Nome da aplicação</ArtifacTID>
<Version>Versão da Aplicação</Version>

Para adicionar dependencias com o maven é so usar as tags Dependency

.m2/repository -> onde fica todas as dependencias baixadas pelo maven

commands - goals
    mvn compile -> compilar o projeto
    mvn clean -> checar a build
    mvn test -> rodar um teste automatico criado com o junit
    mvn package -> fazer a build do projeto
    mvn install -> instala o projeto nos repositorios do maven como .jar
    mvn deploy -> 

Para configurar um proxy é necessario criar um settings.xml no .m2 do maven e usar as tags de proxy

Modulos no maven -> configurar no pom.xml usando tags modules - BOM USO PARA MICROSERVIÇOS
No projeto filho é necessario colocar no seu pom.xml a tag parent para determinar quem é o projeto pai da aplicação JAVA